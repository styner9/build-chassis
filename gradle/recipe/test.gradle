apply plugin: "jacoco"
apply plugin: "com.adarshr.test-logger"

ext["junit.version"] = versions.lib.junit4
ext["junit-jupiter.version"] = versions.lib.junit5

def junit4Only = testControl.junit4 && !testControl.junit5
def junit5Only = !testControl.junit4 && testControl.junit5
def junit4And5 = testControl.junit4 && testControl.junit5

dependencies {
    if (testControl.junit4) {
        testImplementation "junit:junit"
    }
    if (testControl.junit5) {
        testImplementation "org.junit.jupiter:junit-jupiter"
    }
    if (junit4And5) {
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
    }
}

if (junit4Only) {
    configurations.all {
        exclude group: "org.junit.jupiter", module: "junit-jupiter"
        exclude group: "org.junit.jupiter", module: "junit-jupiter-api"
        exclude group: "org.junit.jupiter", module: "junit-jupiter-engine"
    }
} else if (junit5Only) {
    configurations.all {
        exclude group: "junit", module: "junit"
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
}

if (testControl.category.enabled) {
    test {
        if (junit4Only) {
            useJUnit {
                excludeCategories testControl.category.unitTestExclusions
            }
        }
        if (testControl.junit5) {
            useJUnitPlatform {
                excludeTags testControl.category.unitTestExclusions
            }
        }
        jacoco {
            destinationFile = file("$buildDir/jacoco/jacoco-ut.exec")
        }
        reports {
            junitXml.enabled = true
            junitXml.destination = file("$buildDir/reports/tests/test/xml")
        }
    }

    task integrationTest(type: Test, group: "verification") {
        shouldRunAfter test
        if (junit4Only) {
            useJUnit {
                includeCategories testControl.category.integrationTestInclusions
            }
        }
        if (testControl.junit5) {
            useJUnitPlatform {
                includeTags testControl.category.integrationTestInclusions
            }
        }
        jacoco {
            destinationFile = file("$buildDir/jacoco/jacoco-it.exec")
        }
        reports {
            junitXml.enabled = true
            junitXml.destination = file("$buildDir/reports/tests/integrationTest/xml")
        }
    }

    check.dependsOn integrationTest
} else {
    test {
        if (testControl.junit5) {
            useJUnitPlatform()
        }
        jacoco {
            destinationFile = file("$buildDir/jacoco/jacoco-ut.exec")
        }
        reports {
            junitXml.enabled = true
            junitXml.destination = file("$buildDir/reports/tests/test/xml")
        }
    }
}

if (testControl.spock) {
    apply plugin: "groovy"

    sourceSets {
        test {
            groovy {
                srcDirs = ["src/test/groovy"]
            }
        }
    }

    dependencies {
        testImplementation "org.spockframework:spock-core"
        testImplementation "org.spockframework:spock-spring"
    }
}

tasks.withType(Test) {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    // The JaCoCo plugin adds a JacocoTaskExtension extension to all tasks of type Test.
    // Use task state to include or not task execution data
    // https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/TaskState.html
    executionData(tasks.withType(Test).findAll { it.state.executed })

    reports {
        xml.enabled true
    }
}

if (project.hasProperty("skipTest")) {
    if (testControl.category.enabled) {
        gradle.startParameter.excludedTaskNames += ["test", "integrationTest"]
    } else {
        gradle.startParameter.excludedTaskNames += "test"
    }
}
